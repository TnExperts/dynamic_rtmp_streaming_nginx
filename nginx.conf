worker_processes  1;

error_log  logs/error.log;
pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

#HTTP
http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    server {
        listen       80;
        server_name  localhost;

        rewrite_log on;

    	location = /rtmp/on_play {

            	rewrite_by_lua '
                    	ngx.req.read_body()
                    	local args = ngx.req.get_post_args()

                    	local origin
                    	local app
                    	local name

                    	for key, val in pairs(args) do
                            	if 	key == "app" 	then app = val
                            	elseif key == "name"	then name = val
                            	end
                    	end                    

                    	local mongo = require "resty.mongol"
                    	local result

                    	local film = string.gsub(name, "mp4:", "")
                    	ngx.log( ngx.ALERT, "search stream for film: "..film)

                    	conn = mongo:new()
                    	conn:set_timeout(1000)
                    	ok, err = conn:connect("54.170.75.122", 37005)

                    	if not ok then
                     	 ngx.log( ngx.ALERT, "connect to mongodb failed: "..err)
                    	else
                     	 ngx.log( ngx.ALERT, "connected to mongodb: "..ok)

                     	 local db = conn:new_db_handle("mongo_wowza_streams")
                     	 ok, err = db:auth_scram_sha1("wowza_admin","Wowza_Admin15")

                     	 if not ok then
                            	ngx.log( ngx.ALERT, "authentication database failed: "..err)
                     	 else
                            ngx.log( ngx.ALERT, "logged in database succeded: "..ok)

                            col = db:get_col("streams")
                            result = col:find_one({film=film})
                            
                            ngx.log( ngx.ALERT, "mongodb result (id): "..result["_id"]:tostring())
                            ngx.log( ngx.ALERT, "mongodb result (film): "..result["film"])
                            ngx.log( ngx.ALERT, "mongodb result (origin): "..result["origin"])
                            origin = result["origin"]

                     	 end

                    	end

                    	ngx.log( ngx.ALERT, "redirect with this: origin =  ", origin)
                    	ngx.log( ngx.ALERT, "redirect with this: app =  ", app)
                    	ngx.log( ngx.ALERT, "redirect with this: name =  ", name)

                    	local uri = "rtmp://" .. origin .. "/" .. app .. "/" .. name .. "?"

                    	ngx.log( ngx.ALERT, "redirect with this: uri =  ", uri)
                    	return ngx.redirect(uri);
            	';
    	}

    	location = /mongo {
    	default_type text/html;

    	content_by_lua '

            	local mongo = require "resty.mongol"
            	conn = mongo:new()
            	conn:set_timeout(1000)
            	ok, err = conn:connect("54.170.75.122", 37005)

            	if not ok then
                    	ngx.say("connect failed: "..err)
            	else
                    	ngx.say("connected: "..ok)
                    	local db = conn:new_db_handle("mongo_wowza_streams")
                    	ok, err = db:auth_scram_sha1("wowza_admin","Wowza_Admin15")

                    	if not ok then
                            	ngx.say("<br>authentication failed: "..err)
                    	else
                            	ngx.say("<br>logged in: "..ok)

                            	col = db:get_col("streams")
                            	r = col:find_one({film="sample.mp4"})

                            	ngx.say("<br><b>result</b>")
                            	ngx.say("<br>id: "..r["_id"]:tostring())
                            	ngx.say("<br>film: "..r["film"])
                            	ngx.say("<br>origin: "..r["origin"])
                    	end

            	end
    	';
    	}

        location /rewrite {
                rewrite ^.*$ rtmp://52.28.135.233/vod? permanent;
        }

        location = /echo {
                set_unescape_uri $origin $arg_origin;
                echo "Hello, $origin!";
        }

        location / {
                default_type text/html;
                content_by_lua '
                        ngx.say("<p>hello, world</p>")
                ';
        }
    }
}

#RTMP
rtmp {
        server {
                listen 1935;

                # Dynamic pull via http lua rewrite
                application vod {
                        live on;
                        on_play http://localhost:80/rtmp/on_play;
                }

                # Nginx static rewrite
                application vod2 {
                        live on;
                        on_play http://localhost:80/rewrite;
                }
       }
}
